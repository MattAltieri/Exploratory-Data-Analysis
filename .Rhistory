abline(v=12, lwd=2, lty=2)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1, 2), mar=c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, title="West")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Devices
with(faithful, plot(eruptions, waitin))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
setwd("~/R Studio/Projects/swirl temp")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
dev.off()
?dev
?dev.cur
dev.list()
dev.cur()
dev.off()
dev.cur()
dev.list()
windows()
dev.list()
dev.list()
plot(1, 2)
swirl()
library(swirl)
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist, "SWIRL rules!"))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4, 1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=T)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par()$pch
par()$lty
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may <- airquality[airquality$Month=5,]
may <- airquality[airquality$Month==5,]
may <- subset(airquality, Month == 5)
?par
points(wind, ozone, pch=17, col="Blue")
?points
with(airquality, points(Wind, Ozone, pch=17, col="Blue"))
with(may, points(Wind, Ozone, pch=17, col="Blue"))
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
points(may$Wind, may$Ozone, col="blue", pch=17)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17, 8), c("blue", "red"), c("May", "Other Months"))
?legend
legend("topright", pch=c(17, 8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1, 2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Wind, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1, 3), mar=c(4, 4, 2, 1), oma=c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data=airquality)
xyplot(Ozone ~ Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data=airquality, layout=c(5, 1))
xyplot(Ozone ~ Wind | Month, data=airquality, layout=c(5, 1))
p <- xyplot(Ozone ~ Wind, data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout=c(2, 1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price ~ caret | color * cut data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price ~ caret | color * cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price ~ carat | color * cut, data=diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price ~ carat | color * cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
swirl()
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col=drv)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=. ~ drv)
qplot(hwy, data=mpg, facets=drv ~ ., binwidth=2)
swirl()
qplot(displ, hwy, data=mpg, geom=c("point, smooth"), facets=. ~ drv, method="loess")
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=. ~ drv, method="loess")
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size=4, alpha=1/2)
g + geom_point(size=4, alpha=1/2, aes(color=drv))
g + geom_point(aes(color=drv), labs(title="Swirl Rules!"), labs(x="Displacement", y="Hwy Mileage"))
g + geom_point(aes(color=drv), labs(title="Swirl Rules!"), labs(x="Displacement", y="Hwy Mileage"))
help()
g + geom_point()
g + geom_point(aes(color=drv) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage"))
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3, 3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim=c(-3, 3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins=TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv ~ cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot, carat, price, data=diamonds
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm", facets=. ~ cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
diamonds[myd,] + geom_smooth(method="lm", size=3, color="pink")
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
2
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
swlri()
swirl()
cmat
points(cx, cy, col=c("red", orange", purple"), pch=3, cex=2, lwd=2)
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, lwd=3, cex=3)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame, 6)$cluster, pch=19, cex=2)
plot(x, y, pch=19, cex=2)
distTmp <- dist(x, y, cx, cy)
distTmp <- mdist(x, y, cx, cy)
newClust <- apply(distTmp, 2, which.min)
col1 <- c("red", "orange", "purple")
points, x, y, col=cols1[newClust], pch=19, cex=2
points(x, y, col=cols1[newClust], pch=19, cex=2)
newCx <- tapply(x, newClust, mean)
newCy <- tapply(y, newClust, mean)
points(cx, cy, col=cols1, pch=3, cex=2, lwd=2)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
distTmp2 <- mdist(x, y, newCx, newCy)
newClust2 <- apply(distTmp2, 2, which.min)
points(x, y, col=cols1[newClust2], pch=19, cex=2)
finalCx <- tapply(x, newClust2, mean)
finalCy <- tapply(y, newClust2, mean)
points(finalCx, finalCy, col=9, cex=2, lwd=2)
points(finalCx, finalCy, col=col1, pch=9, cex=2, lwd=2)
plot(x, y, pch=19, cex=2)
mdist
?matrix
distTmp <- matrix(NA, nrow=length(x), ncol=2)
length(x)
length(y)
clusters <- 3
distTmp <- matrix(NA, nrow=clusters, ncol=length(x))
distTmp[1,] <- (x-cx[1])^2 + (y-cy[1])^2
distTmp[2,] <- (x-cx[2])^2 + (y-cy[2])^2
distTmp[3,] <- (x - cx[3])^2 + (y - cy[3])^2
points(cx, cy, col=cols1, pch=3, cex=2, lwd=2)
newClust <- apply(distTmp, 2, which.min)
points(x, y, col=cols1[newClust], pch=19, cex=2)
newCx <- tapply(x, newClust, mean)
newCy <- tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
distTmp2 <- matrix(NA, nrow=clusters, ncol=length(x))
distTmp2[1,] <- (x - newCx[1])^2 + (y - newCy[1])^2
distTmp2[2,] <- (x - newCx[2])^2 + (y - newCy[2])^2
distTmp3[3,] <- (x - newCx[3])^2 + (y - newCy[3])^2
distTmp2[3,] <- (x - newCx[3])^2 + (y - newCy[3])^2
newClust2 <- apply(distTmp2, 2, which.min)
point(x, y, col=col1[newClust2], pch=19, cex=2)
points(x, y, col=col1[newClust2], pch=19, cex=2)
finalCx <- tapply(x, newClust2, mean)
finalCy <- tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
distFinal <- matrix(NA, nrow=clusters, ncol=length(x))
distFinal[1,] <- (x - finalCx[1])^ + (y - finalCy[1])^2
distFinal[2,] <- (x - finalCx[2])^ + (y - finalCy[2])^2
distFinal[3,] <- (x - finalCx[3])^ + (y - finalCy[3])^2
finalClust <- apply(distFinal, 2, which.min)
points(x, y, col=cols1[finalClust], pch=19, cex=2)
distFinal[1,] <- (x - finalCx[1])^2 + (y - finalCy[1])^2
distFinal[2,] <- (x - finalCx[2])^2 + (y - finalCy[2])^2
distFinal[3,] <- (x - finalCx[3])^2 + (y - finalCy[3])^2
finalClust <- apply(distFinal, 2, which.min)
points(x, y, col=cols1[finalClust], pch=19, cex=2)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(mat)
prcomp(scale(mat)
)
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
setwd("~/R Studio/Projects/Rafa tutorial temp")
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/Lectures & Notes/Exploratory Data Analysis/EDA Week 3 Lectures")
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0, 1, len=10))
## colorRampPalette
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
## RColorBrewer
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col=pal(20))
## The smoothScatter function
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
## Scatterplot with no transparency
plot(x, y, pch=19)
## Scatterplot with transparency
plot(x, y, col=rgb(0, 0, 0, 0.2), pch=19)
?brewer.pal
setwd("~/R Studio/Projects/swirl temp")
swirl()
library(swirl)
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha=.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "ByGn")
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/Shared Projects and Assignments/Getting and Cleaning Data/GCD Week 3 Project Peer Review")
student1 <- read.table("./student1.txt", header=T)
View(student1)
student2 <- read.table("./student2.txt", header=T)
View(student2)
student3 <- read.table("./student3.txt", header=T)
View(student3)
student4 <- read.table("./student4.txt", header=T)
student4 <- read.table("./students4.txt", header=T)
View(student4)
student3 <- read.table("./student3.txt", header=T)
View(student4)
student4 %>%
arrange(subject, activity) %>%
View()
library(dplyr)
student4 %>%
arrange(subject, activity) %>%
View()
View(student3)
setwd("~/R Studio/Projects")
setwd("~/R Studio/Projects/Lectures & Notes/Getting and Cleaning Data/GCD Week 4 Lectures")
## Fixing character vectors - tolower(), toupper()
if (!file.exists("./data")) { dir.create("./data") }
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD&bom=true"
download.file(fileUrl, destfile="./data/camera.csv")
cameraData <- read.csv("./data/camera.csv")
names(cameraData)
tolower(names(cameraData))
splitNames <- strsplit(names(cameraData), "\\.")
splitNames[[5]]
splitNames[[6]]
## Quick aside - lists
mylist <- list(letters=c("A", "b", "c"), numbers(1:3), matrix(1:25, ncol=5))
head(mylist)
## Quick aside - lists
mylist <- list(letters=c("A", "b", "c"), numbers=(1:3), matrix(1:25, ncol=5))
head(mylist)
mylist[1]
mylist$letters
mylist[[1]]
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply(splitNames, firstElement)
## Peer review data
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile="./data/reviews.csv")
download.file(fileUrl2, destfile="./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv")
solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions, 2)
names(reviews)
sub("_", "", names(reviews), )
## Fixing character vectors - gsub()
testName <- "this_is_a_test"
sub("_", "", testName)
gsub("_", "", testName)
## Finding values - grep, grepl()
grep("Alameda", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda", cameraData$intersection),]
## More on grep()
grep("Alameda", cameraData$intersection, value=T)
grep("JeffStreet", cameraData$intersection)
length(grep("JeffStreet", cameraData$intersection))
## More useful string functions
library(stringer)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey", "Leek")
install.package("stringer")
install.packages("stringer")
## More useful string functions
library(stringer)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey", "Leek")
## More useful string functions
library(stringr)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey", "Leek")
paste0("Jeffrey", "Leek")
str_trim("Jeff        ")
## Starting simple
d1 <- date()
d1
class(d1)
## Date class
d2 <- Sys.Date()
d2
class(d2)
format(d2, "%a %b %d")
## Creating dates
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z[1] - z[2]
as.numeric(z[1]-z[2])
## Creating dates
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
z[1] - z[2]
as.numeric(z[1]-z[2])
## Converting to Julian
weekdays(d2)
months(d2)
julian(d2)
## Converting to Julian
weekdays(d2)
months(d2)
julian(d2)
## Lubridate
library(lubridate)
ymd("20140108")
mdy("08/04/2013")
dmy("03-04-2013")
## Dealing with times
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03 10:15:03", tz="Pacific/Auckland")
?Sys.timezone
## Some functions have slightly different syntax
x <- dmy(c("1jan2013", "2jan2013", "31mar2013", "30jul2013"))
wday(x[1])
wday(x[1], label=T)
setwd("~/R Studio/Projects/Lectures & Notes/Exploratory Data Analysis")
